#leetcode



1. solution


class Solution {
public:
    bool isAnagram(string s, string t) {
        unordered_map<char,int> m;
        //unordered_map<char,int> n;
        int sizeS = s.size();
        int sizeT = t.size();

        if(sizeS != sizeT) return false;
        for(int i=0 ; i<sizeS ; i++){
            m[s[i]]++;
        }

        for(int i=0 ; i<sizeT ; i++){
            if(m.find(t[i])!=m.end()){
                m[t[i]]--;
                if(m[t[i]]==0) m.erase(t[i]);
            }
            else return false;
        }

        // for(auto elmt : m){
        //     if(n.find(elmt.first) == n.end()) return false;
        //     else{
        //         int freq1 = elmt.second;
        //         int freq2 = n[elmt.first];
        //         if(freq1 != freq2) return false;
        //         //else return true;
        //     }
        // }
        if(m.size()==0) return true;
        else return false;

    }
};






2. solution


class Solution {
public:
    bool isAnagram(string s, string t) {
        sort(s.begin() , s.end());
        sort(t.begin() , t.end());
        return s==t;
        
    }
};







3. solution


class Solution {
public:
    bool isAnagram(string s, string t) {
        unordered_map<char,int> m;
        unordered_map<char,int> n;
        int sizeS = s.size();
        int sizeT = t.size();

        if(sizeS != sizeT) return false;
        for(int i=0 ; i<sizeS ; i++){
            m[s[i]]++;
        }

        for(int i=0 ; i<sizeS ; i++){
            n[t[i]]++;
        }

        for(auto elmt : m){
            if(n.find(elmt.first) == n.end()) return false;
            else{
                int freq1 = elmt.second;
                int freq2 = n[elmt.first];
                if(freq1 != freq2) return false;
                //else return true;
            }
        }
        return true;


    }
};
