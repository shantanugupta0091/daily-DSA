#gfg



//{ Driver Code Starts
#include <bits/stdc++.h>

using namespace std;


// } Driver Code Ends
class Solution {
  public:
    // a,b : the arrays
    // Function to return a list containing the union of the two arrays.
    vector<int> findUnion(vector<int> &a, vector<int> &b) {
    
        int i=0;
        int j=0;
       
        int asize=a.size();
        int bsize=b.size();
        
        vector<int>ans;
        
        
        while(i<asize && j<bsize){
            
            if(a[i]<b[j]){
                if(ans.empty() || ans.back()!= a[i]){
                    
                    ans.push_back(a[i]);
                }
                i++;
            }
            
            if(a[i]>b[j]){
                 if(ans.empty() || ans.back()!= b[j]){
                    
                    ans.push_back(b[j]);
                }
                 
                j++;
            }
            
            if(a[i]==b[j]){
                 if(ans.empty() || ans.back()!= a[i]){
                    
                    ans.push_back(a[i]);
                }
                
                i++;
                j++;
            }
            
        }
        
        
        if(i==asize){
            
            for(int x=j; x<bsize; x++){
                
                if(ans.empty() || ans.back()!= b[x]){
                    
                    ans.push_back(b[x]);
                }
            }
            
        }
        
        
        else{
            
            for(int x=i; x<asize; x++){
                 if(ans.empty() || ans.back()!= a[x]){
                    
                    ans.push_back(a[x]);
                }
            }
            
        }
        
        // while (i < asize) {
        // if (ans.empty() || ans.back() != a[i]) {
        //     ans.push_back(a[i]);
        // }
        // i++;
        // }

    
        // while (j < bsize) {
        // if (ans.empty() || ans.back() != b[j]) {
        //     ans.push_back(b[j]);
        // }
        // j++;
        // }
        
        return ans;
        
    
    
    
    }    
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    cin.ignore();
    while (t--) {
        vector<int> a, b;
        string input;

        // Read first array
        getline(cin, input);
        stringstream ss(input);
        int number;
        while (ss >> number) {
            a.push_back(number);
        }

        // Read second array
        getline(cin, input);
        stringstream ss2(input);
        while (ss2 >> number) {
            b.push_back(number);
        }

        Solution ob;
        vector<int> ans = ob.findUnion(a, b);
        for (int i : ans)
            cout << i << ' ';
        cout << endl;
        cout << "~" << endl;
    }
    return 0;
}

// } Driver Code Ends
