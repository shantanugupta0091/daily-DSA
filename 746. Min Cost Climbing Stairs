#leetcode


int helper(int i,vector<int>& cost , vector<int>& dp){
        
        if(i==0 || i==1) return cost[i]; 
        if(dp[i] != -1) return dp[i];
        return dp[i] = cost[i] + min(helper(i-1,cost,dp),helper(i-2,cost,dp));
    }

    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size();
        vector<int>dp(n,-1);
        return min(helper(n-1,cost, dp),helper(n-2,cost, dp));
    }








solution 2 ___________________________________________________


int minCostClimbingStairs(vector<int>& cost) {
        
        int n = cost.size();
        for(int i=2; i<n; i++){
            
         cost[i]= cost[i] + min(cost[i-1] , cost[i-2]);

        }
        return min(cost[n-1] , cost[n-2] );
    }
