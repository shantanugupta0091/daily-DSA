#leetcode



ListNode* findmiddle(ListNode* temp){
        ListNode* fast = temp ;
        ListNode* slow = temp ;
        ListNode* prev = NULL;

        while(fast != NULL && fast -> next != NULL ){
            
            fast = fast -> next -> next ;
            prev = slow ;
            slow = slow -> next ;


        }
        if (prev != NULL)
            prev->next = NULL;

        return slow;
    }

     ListNode* mergeLL(ListNode* lefthead , ListNode* righthead){

        if (lefthead == NULL) return righthead;
        if (righthead == NULL) return lefthead;

        ListNode* temp  ;
        if(lefthead -> val < righthead -> val){
            temp = lefthead ;
            lefthead = lefthead -> next ;
        }
        else{
            temp = righthead ;
            righthead = righthead -> next ;
        }

        ListNode* perma = temp ;

        while(righthead != NULL && lefthead != NULL ){
            if(lefthead -> val < righthead -> val){
                temp -> next  = lefthead ;
                lefthead = lefthead -> next ;
            }
            else{
                temp -> next  = righthead ;
                righthead = righthead -> next ;
            }
            temp = temp -> next ;
        }
        if (lefthead != NULL) temp->next = lefthead;
        else temp->next = righthead;

        return perma ;

    }

    ListNode* sortList(ListNode* head) {
        

        if( head == NULL || head -> next == NULL ){
            return head;
        }

        ListNode* middle = findmiddle(head);
        ListNode* lefthead = head;
        ListNode* righthead = middle ;
        //middle -> next = NULL ;

        lefthead = sortList( lefthead ) ;
        righthead = sortList( righthead ) ;

        ListNode* finalLL = mergeLL( lefthead , righthead ) ;
        return finalLL ;
    }
